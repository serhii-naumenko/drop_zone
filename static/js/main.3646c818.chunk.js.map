{"version":3,"sources":["redux/reduser.ts","components/ButtonsGroupe/ButtonsGroupe.tsx","components/ImageGrid/ImageGrid.tsx","components/DropzoneCopy/DropzoneCopy.tsx","components/Dropzone/Dropzone.tsx","components/WindowInfo/WindowInfo.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["personReducer","createSlice","name","initialState","isChosenPerson","reducers","setIsChosenPerson","state","action","payload","selectors","actions","reducer","ButtonsGroupe","useState","addText","setAddText","addTitle","setAddTitle","isAdd","setIsAdd","dispatch","useDispatch","handlerAdd","useCallback","handlerChoisePerson","handlerChangeFile","exactFile","result","ASN1","decode","typeName","Error","tbsCertificate","sub","console","log","className","type","title","classNames","disabled","onClick","accept","onChange","event","target","files","Image","image","src","alt","id","ImageGrid","images","map","DropzoneCopy","setImages","onDrop","acceptedFiles","file","reader","FileReader","onload","prevState","cuid","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","path","size","Dropzone","WindowInfo","useSelector","App","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3646c818.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\ninterface InitialState {\n  isChosenPerson: boolean,\n}\n\nconst initialState: InitialState = {\n  isChosenPerson: false,\n};\n\nconst personReducer = createSlice({\n  name: 'personInfo',\n  initialState,\n  reducers: {\n    setIsChosenPerson: (state, action) => {\n      return {\n        ...state,\n        isChosenPerson: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getIsChosenperson: (state: InitialState) => state.isChosenPerson,\n};\n\nexport const {\n  setIsChosenPerson,\n} = personReducer.actions;\n\nexport const { reducer } = personReducer;\n","import React, { useCallback, useState } from 'react';\nimport ASN1 from '@lapo/asn1js';\n// import Hex from '@lapo/asn1js/hex';\nimport classNames from 'classnames';\nimport './ButtonsGroupe.scss';\nimport { useDispatch } from 'react-redux';\n\nimport { setIsChosenPerson } from '../../redux/reduser';\n// eslint-disable-next-line max-len\n// import certData from '../../external_files/test_certs/cert.cer';\n\n// const ASN1 = require('@lapo/asn1js');\n\nexport const ButtonsGroupe: React.FC = () => {\n  const [addText, setAddText] = useState('Додати');\n  const [addTitle, setAddTitle] = useState('Go to Додавання сертифіката');\n  const [isAdd, setIsAdd] = useState(false);\n  const dispatch = useDispatch();\n\n  const handlerAdd = useCallback(() => {\n    const currentAddText = addText;\n\n    if (currentAddText === 'Додати') {\n      setAddText('Скасувати');\n      setAddTitle('Go to Головна');\n      setIsAdd(true);\n      dispatch(setIsChosenPerson(true));\n    } else {\n      setAddText('Додати');\n      setAddTitle('Go to Додавання сертифіката');\n      setIsAdd(false);\n      dispatch(setIsChosenPerson(false));\n    }\n  }, [addText, addTitle, isAdd]);\n\n  const handlerChoisePerson = useCallback(() => {\n\n  }, []);\n\n  const handlerChangeFile = useCallback((exactFile) => {\n    const result = ASN1.decode(exactFile);\n\n    if (result.typeName() !== 'SEQUENCE') {\n      throw new Error('Неправильна структура конверта сертифіката (очікується SEQUENCE)');\n    }\n\n    const tbsCertificate = result.sub[0];\n\n    // eslint-disable-next-line no-console\n    console.log(tbsCertificate);\n\n    // eslint-disable-next-line no-console\n    console.log(exactFile);\n  }, []);\n\n  return (\n    <div className=\"ButtonsGroupe\">\n      <button\n        type=\"button\"\n        title=\"Go to Перегляд сертифікату Іванов\"\n        className={classNames(\n          'ButtonsGroupe__item',\n          {\n            'ButtonsGroupe__item-passive': isAdd,\n          },\n        )}\n        disabled={isAdd}\n      >\n        Іванов Іван Іванович\n      </button>\n      <button\n        type=\"button\"\n        title=\"Go to Перегляд сертифікату Петров\"\n        className={classNames(\n          'ButtonsGroupe__item',\n          {\n            'ButtonsGroupe__item-passive': isAdd,\n          },\n        )}\n        disabled={isAdd}\n        onClick={handlerChoisePerson}\n      >\n        Петров Петро Петрович\n      </button>\n      <button\n        type=\"button\"\n        title=\"Go to Перегляд сертифікату Сидоров\"\n        className={classNames(\n          'ButtonsGroupe__item',\n          {\n            'ButtonsGroupe__item-passive': isAdd,\n          },\n        )}\n        disabled={isAdd}\n      >\n        Сидоров Сидор Сидорович\n      </button>\n      <button\n        type=\"button\"\n        title={addTitle}\n        className=\"ButtonsGroupe__add\"\n        onClick={handlerAdd}\n      >\n        {addText}\n      </button>\n      <input\n        title=\"add your file\"\n        type=\"file\"\n        className=\"ButtonsGroupe__file\"\n        accept=\"multiple\"\n        onChange={(event) => handlerChangeFile(event.target.files)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { CustomImage } from '../../types/CustomImageType';\nimport './ImageGrid.scss';\n\ntype Props = {\n  images: CustomImage[]\n};\n\ntype Props2 = {\n  image: CustomImage\n};\n\nconst Image = ({ image }: Props2) => {\n  if (typeof image.src !== 'string') {\n    return null;\n  }\n\n  return (\n    <div className=\"file-item\">\n      <img\n        alt={`img - ${image.id}`}\n        src={image.src}\n        className=\"file-img\"\n      />\n    </div>\n  );\n};\n\nexport const ImageGrid: React.FC<Props> = ({ images }) => {\n  const renderImage = (image: CustomImage) => {\n    return (\n      <Image\n        image={image}\n        key={`${image.id}-image`}\n      />\n    );\n  };\n\n  return (\n    <section className=\"file-list\">{images.map(renderImage)}</section>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { FileWithPath, useDropzone } from 'react-dropzone';\nimport cuid from 'cuid';\nimport './DropzoneCopy.scss';\nimport { CustomImage } from '../../types/CustomImageType';\nimport { ImageGrid } from '../ImageGrid';\n\nexport const DropzoneCopy: React.FC = () => {\n  const [images, setImages] = useState<CustomImage[]>([]);\n\n  // eslint-disable-next-line no-console\n  console.log(images);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    acceptedFiles.map((file: File) => {\n      const reader = new FileReader();\n\n      reader.onload = (event) => {\n        setImages((prevState) => [\n          ...prevState,\n          { id: cuid(), src: event.target?.result || null },\n        ]);\n      };\n\n      reader.readAsDataURL(file);\n\n      return file;\n    });\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles,\n    isDragActive,\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.png'],\n      'text/html': ['.html', '.htm'],\n    },\n  });\n\n  const files = acceptedFiles.map((file: FileWithPath) => (\n    <li\n      key={file.path}\n      className=\"DropzoneCopy__item\"\n    >\n      {`${file.path} - ${file.size} bytes`}\n    </li>\n  ));\n\n  return (\n    <>\n      <div className=\"DropzoneCopy\">\n        <div {...getRootProps({ className: 'DropzoneCopy__zone' })}>\n          <input className=\"DropzoneCopy__input\" {...getInputProps()} />\n          <div className=\"DropzoneCopy__content\">\n            {isDragActive\n              ? (\n                <p className=\"DropzoneCopy__text\">\n                  Release to drop the files here\n                </p>\n              )\n              : (\n                <p className=\"DropzoneCopy__text\">\n                  Drag’n’drop some files with images here, or click to select files\n                </p>\n              )}\n            <aside className=\"DropzoneCopy__files\">\n              <ul className=\"DropzoneCopy__list\">\n                {files}\n              </ul>\n            </aside>\n          </div>\n        </div>\n      </div>\n      <ImageGrid images={images} />\n    </>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './Dropzone.scss';\n\nexport const Dropzone: React.FC = () => {\n  // const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    // setFiles(acceptedFiles.map(file => Object.assign(file, {\n    //   preview: URL.createObjectURL(file),\n    // })));\n    // eslint-disable-next-line no-console\n    console.log(acceptedFiles);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    // accept: 'image/jpeg, image/png',\n  });\n\n  // const thumbs = files.map(file => (\n  //   <div key={file.name}>\n  //     <img\n  //       src={file.preview}\n  //       alt={file.name}\n  //     />\n  //   </div>\n  // ));\n\n  // clean up\n  // useEffect(() => () => {\n  //   files.forEach(file => URL.revokeObjectURL(file.preview));\n  // }, [files]);\n\n  return (\n    <section className=\"Dropzone\">\n      <div {...getRootProps({})}>\n        <input className=\"Dropzone__input\" {...getInputProps()} />\n        <div className=\"Dropzone__text\">Drag and drop your images here.</div>\n      </div>\n      <aside>\n        {/* {thumbs} */}\n      </aside>\n    </section>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Dropzone } from '../Dropzone/Dropzone';\nimport { selectors } from '../../redux/reduser';\nimport './WindowInfo.scss';\n\nexport const WindowInfo: React.FC = () => {\n  const isChosenPerson = useSelector(selectors.getIsChosenperson);\n\n  return (!isChosenPerson\n    ? (<div className=\"WindowInfo\"></div>)\n    : <Dropzone />\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { ButtonsGroupe } from './components/ButtonsGroupe';\nimport { DropzoneCopy } from './components/DropzoneCopy';\nimport { WindowInfo } from './components/WindowInfo';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ButtonsGroupe />\n      <WindowInfo />\n      <DropzoneCopy />\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './reduser';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}