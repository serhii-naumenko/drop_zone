{"version":3,"sources":["redux/reduser.ts","components/ButtonsGroupe/ButtonsGroupe.tsx","components/ImageGrid/ImageGrid.tsx","components/DropzoneCopy/DropzoneCopy.tsx","components/Dropzone/Dropzone.tsx","components/WindowInfo/WindowInfo.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["personReducer","createSlice","name","initialState","isChosenPerson","chosenUser","id","status","dateStart","dateFinish","reducers","setIsChosenPerson","state","action","payload","setChosenUser","selectors","actions","reducer","users","ButtonsGroupe","useState","addText","setAddText","addTitle","setAddTitle","isAdd","setIsAdd","dispatch","useDispatch","handlerAdd","useCallback","handlerChoisePerson","chosenId","find","user","handlerChangeFile","exactFile","result","ASN1","decode","typeName","Error","tbsCertificate","sub","console","log","className","map","type","title","split","classNames","disabled","onClick","accept","onChange","event","target","files","Image","image","src","alt","ImageGrid","images","DropzoneCopy","setImages","onDrop","acceptedFiles","file","reader","FileReader","onload","prevState","cuid","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","path","size","Dropzone","WindowInfo","useSelector","setUser","useEffect","App","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2452ce5d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { User } from '../types/UserType';\n\ninterface InitialState {\n  isChosenPerson: boolean,\n  chosenUser: User,\n}\n\nconst initialState: InitialState = {\n  isChosenPerson: false,\n  chosenUser: {\n    id: 0,\n    name: '',\n    status: '',\n    dateStart: '',\n    dateFinish: '',\n  },\n};\n\nconst personReducer = createSlice({\n  name: 'personInfo',\n  initialState,\n  reducers: {\n    setIsChosenPerson: (state, action) => {\n      return {\n        ...state,\n        isChosenPerson: action.payload,\n      };\n    },\n    setChosenUser: (state, action) => {\n      return {\n        ...state,\n        chosenUser: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  getIsChosenperson: (state: InitialState) => state.isChosenPerson,\n  getChosenUser: (state: InitialState) => state.chosenUser,\n};\n\nexport const {\n  setIsChosenPerson,\n  setChosenUser,\n} = personReducer.actions;\n\nexport const { reducer } = personReducer;\n","import React, { useCallback, useState } from 'react';\nimport ASN1 from '@lapo/asn1js';\n// import Hex from '@lapo/asn1js/hex';\nimport classNames from 'classnames';\nimport './ButtonsGroupe.scss';\nimport { useDispatch } from 'react-redux';\n\nimport { setChosenUser, setIsChosenPerson } from '../../redux/reduser';\n// eslint-disable-next-line max-len\n// import certData from '../../external_files/test_certs/cert.cer';\n\n// const ASN1 = require('@lapo/asn1js');\n\nconst users = [\n  {\n    id: 1,\n    name: 'Іванов Іван Іванович',\n    status: 'valid',\n    dateStart: '10.08.2022',\n    dateFinish: '09.08.2024',\n  },\n  {\n    id: 2,\n    name: 'Петров Петро Петрович',\n    status: 'invalid',\n    dateStart: '15.06.2020',\n    dateFinish: '14.06.2022',\n  },\n  {\n    id: 3,\n    name: 'Сидоров Сидор Сидорович',\n    status: 'valid',\n    dateStart: '06.07.2021',\n    dateFinish: '05.07.2023',\n  },\n];\n\nexport const ButtonsGroupe: React.FC = () => {\n  const [addText, setAddText] = useState('Додати');\n  const [addTitle, setAddTitle] = useState('Go to Додавання сертифіката');\n  const [isAdd, setIsAdd] = useState(false);\n  const dispatch = useDispatch();\n\n  const handlerAdd = useCallback(() => {\n    const currentAddText = addText;\n\n    if (currentAddText === 'Додати') {\n      setAddText('Скасувати');\n      setAddTitle('Go to Головна');\n      setIsAdd(true);\n      dispatch(setIsChosenPerson(true));\n    } else {\n      setAddText('Додати');\n      setAddTitle('Go to Додавання сертифіката');\n      setIsAdd(false);\n      dispatch(setIsChosenPerson(false));\n      dispatch(setChosenUser({\n        id: 0,\n        name: '',\n        status: '',\n        dateStart: '',\n        dateFinish: '',\n      }));\n    }\n  }, [addText, addTitle, isAdd]);\n\n  const handlerChoisePerson = useCallback((chosenId) => {\n    const chosenUser = users.find((user) => user.id === chosenId);\n\n    if (chosenUser) {\n      dispatch(setChosenUser(chosenUser));\n    }\n  }, []);\n\n  const handlerChangeFile = useCallback((exactFile) => {\n    const result = ASN1.decode(exactFile);\n\n    if (result.typeName() !== 'SEQUENCE') {\n      throw new Error('Неправильна структура конверта сертифіката (очікується SEQUENCE)');\n    }\n\n    const tbsCertificate = result.sub[0];\n\n    // eslint-disable-next-line no-console\n    console.log(tbsCertificate);\n\n    // eslint-disable-next-line no-console\n    console.log(exactFile);\n  }, []);\n\n  return (\n    <div className=\"ButtonsGroupe\">\n      {users.map((user) => (\n        <button\n          type=\"button\"\n          key={user.id}\n          title={`Go to Перегляд сертифікату ${user.name.split(' ')[0]}`}\n          className={classNames(\n            'ButtonsGroupe__item',\n            {\n              'ButtonsGroupe__item-passive': isAdd,\n            },\n          )}\n          disabled={isAdd}\n          onClick={() => handlerChoisePerson(user.id)}\n        >\n          {user.name}\n        </button>\n      ))}\n      <button\n        type=\"button\"\n        title={addTitle}\n        className=\"ButtonsGroupe__add\"\n        onClick={handlerAdd}\n      >\n        {addText}\n      </button>\n      <input\n        title=\"add your file\"\n        type=\"file\"\n        className=\"ButtonsGroupe__file\"\n        accept=\"multiple\"\n        onChange={(event) => handlerChangeFile(event.target.files)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { CustomImage } from '../../types/CustomImageType';\nimport './ImageGrid.scss';\n\ntype Props = {\n  images: CustomImage[]\n};\n\ntype Props2 = {\n  image: CustomImage\n};\n\nconst Image = ({ image }: Props2) => {\n  if (typeof image.src !== 'string') {\n    return null;\n  }\n\n  return (\n    <div className=\"file-item\">\n      <img\n        alt={`img - ${image.id}`}\n        src={image.src}\n        className=\"file-img\"\n      />\n    </div>\n  );\n};\n\nexport const ImageGrid: React.FC<Props> = ({ images }) => {\n  const renderImage = (image: CustomImage) => {\n    return (\n      <Image\n        image={image}\n        key={`${image.id}-image`}\n      />\n    );\n  };\n\n  return (\n    <section className=\"file-list\">{images.map(renderImage)}</section>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { FileWithPath, useDropzone } from 'react-dropzone';\nimport cuid from 'cuid';\nimport './DropzoneCopy.scss';\nimport { CustomImage } from '../../types/CustomImageType';\nimport { ImageGrid } from '../ImageGrid';\n\nexport const DropzoneCopy: React.FC = () => {\n  const [images, setImages] = useState<CustomImage[]>([]);\n\n  // eslint-disable-next-line no-console\n  console.log(images);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    acceptedFiles.map((file: File) => {\n      const reader = new FileReader();\n\n      reader.onload = (event) => {\n        setImages((prevState) => [\n          ...prevState,\n          { id: cuid(), src: event.target?.result || null },\n        ]);\n      };\n\n      reader.readAsDataURL(file);\n\n      return file;\n    });\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles,\n    isDragActive,\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.png'],\n      'text/html': ['.html', '.htm'],\n    },\n  });\n\n  const files = acceptedFiles.map((file: FileWithPath) => (\n    <li\n      key={file.path}\n      className=\"DropzoneCopy__item\"\n    >\n      {`${file.path} - ${file.size} bytes`}\n    </li>\n  ));\n\n  return (\n    <>\n      <div className=\"DropzoneCopy\">\n        <div {...getRootProps({ className: 'DropzoneCopy__zone' })}>\n          <input className=\"DropzoneCopy__input\" {...getInputProps()} />\n          <div className=\"DropzoneCopy__content\">\n            {isDragActive\n              ? (\n                <p className=\"DropzoneCopy__text\">\n                  Release to drop the files here\n                </p>\n              )\n              : (\n                <p className=\"DropzoneCopy__text\">\n                  Drag’n’drop some files with images here, or click to select files\n                </p>\n              )}\n            <aside className=\"DropzoneCopy__files\">\n              <ul className=\"DropzoneCopy__list\">\n                {files}\n              </ul>\n            </aside>\n          </div>\n        </div>\n      </div>\n      <ImageGrid images={images} />\n    </>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './Dropzone.scss';\n\nexport const Dropzone: React.FC = () => {\n  // const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    // setFiles(acceptedFiles.map(file => Object.assign(file, {\n    //   preview: URL.createObjectURL(file),\n    // })));\n    // eslint-disable-next-line no-console\n    console.log(acceptedFiles);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    // accept: 'image/jpeg, image/png',\n  });\n\n  // const thumbs = files.map(file => (\n  //   <div key={file.name}>\n  //     <img\n  //       src={file.preview}\n  //       alt={file.name}\n  //     />\n  //   </div>\n  // ));\n\n  // clean up\n  // useEffect(() => () => {\n  //   files.forEach(file => URL.revokeObjectURL(file.preview));\n  // }, [files]);\n\n  return (\n    <section className=\"Dropzone\">\n      <div {...getRootProps({})}>\n        <input className=\"Dropzone__input\" {...getInputProps()} />\n        <div className=\"Dropzone__text\">Drag and drop your images here.</div>\n      </div>\n      <aside>\n        {/* {thumbs} */}\n      </aside>\n    </section>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Dropzone } from '../Dropzone/Dropzone';\nimport { selectors } from '../../redux/reduser';\nimport './WindowInfo.scss';\n\nexport const WindowInfo: React.FC = () => {\n  const isChosenPerson = useSelector(selectors.getIsChosenperson);\n  const chosenUser = useSelector(selectors.getChosenUser);\n  const [user, setUser] = useState({\n    id: 0,\n    name: '',\n    status: '',\n    dateStart: '',\n    dateFinish: '',\n  });\n\n  useEffect(() => {\n    const newUser = chosenUser;\n\n    setUser(newUser);\n  }, [chosenUser]);\n\n  return (!isChosenPerson\n    ? (\n      <div className=\"WindowInfo\">\n        <p className=\"WindowInfo__text\">\n          {user.id !== 0 && `Статус сертифікату: ${user.status}`}\n        </p>\n        <p className=\"WindowInfo__text\">\n          {user.id !== 0 && `Дата оформлення: ${user.dateStart}`}\n        </p>\n        <p className=\"WindowInfo__text\">\n          {user.id !== 0 && `Дата завершення терміну дії: ${user.dateFinish}`}\n        </p>\n      </div>\n    )\n    : <Dropzone />\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { ButtonsGroupe } from './components/ButtonsGroupe';\nimport { DropzoneCopy } from './components/DropzoneCopy';\nimport { WindowInfo } from './components/WindowInfo';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ButtonsGroupe />\n      <WindowInfo />\n      <DropzoneCopy />\n    </div>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './reduser';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}